<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Butterfly主题美化</title>
      <link href="/posts/a7938b5c.html"/>
      <url>/posts/a7938b5c.html</url>
      
        <content type="html"><![CDATA[<p>这个有官方文档：<strong><ahref="https://butterfly.js.org/">官网网站</a></strong></p><h3 id="生成文章唯一链接">生成文章唯一链接</h3><p>Hexo的默认文章链接格式是年，月，日，标题这种格式来生成的。如果你的标题是中文的话，那你的URL 链接就会包含中文，</p><p>复制后的 URL路径就是把中文变成了一大堆字符串编码，如果你在其他地方用这边文章的 url链接，偶然你又修改了改文章的标题，那这个 URL链接就会失效。为了给每一篇文章来上一个属于自己的链接，写下此教程，利用hexo-abbrlink 插件，A Hexo plugin to generate static post link based onpost titles , 来解决这个问题。 参考 github 官方： hexo-abbrlink按照此教程配置完之后如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure><p>在主配置文件 _config.yml 找到 permalink：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- permalink: :year/:month/:day/:title/</span><br><span class="line">#修改为</span><br><span class="line">+permalink: post/:abbrlink.html # post为自定义前缀</span><br><span class="line">+ abbrlink:</span><br><span class="line">+    alg: crc32   #算法： crc16(default) and crc32</span><br><span class="line">+    rep: hex     #进制： dec(default) and hex</span><br></pre></td></tr></table></figure><h3 id="代码高亮主题">代码高亮主题</h3><p>在主题文件_config.butterfly.yml</p><p><code>Butterfly</code> 支持 6 种代码高亮样式：</p><ul><li>darker</li><li>pale night</li><li>light</li><li>ocean</li><li>mac</li><li>mac light</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">highlight_theme: mac</span><br></pre></td></tr></table></figure><h3 id="代码复制">代码复制</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">highlight_copy: true</span><br></pre></td></tr></table></figure><h3 id="顶部图">顶部图</h3><table><colgroup><col style="width: 21%" /><col style="width: 78%" /></colgroup><thead><tr class="header"><th>配置</th><th>解释</th></tr></thead><tbody><tr class="odd"><td>index_img</td><td>主页的 top_img</td></tr><tr class="even"><td>default_top_img</td><td>默认的 top_img，当页面的 top_img 没有配置时，会显示default_top_img</td></tr><tr class="odd"><td>archive_img</td><td>归档页面的 top_img</td></tr><tr class="even"><td>tag_img</td><td>tag 子页面 的 默认 top_img</td></tr><tr class="odd"><td>tag_per_img</td><td>tag 子页面的 top_img，可配置每个 tag 的 top_img</td></tr><tr class="even"><td>category_img</td><td>category 子页面 的 默认 top_img</td></tr><tr class="odd"><td>category_per_img</td><td>category 子页面的 top_img，可配置每个 category 的 top_img</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index_img: xxx.png</span><br></pre></td></tr></table></figure><p>其它页面 （tags/categories/ 自建页面）和文章页的 <code>top_img</code>，请到对应的 md 页面设置 <code>front-matter</code> 中的<code>top_img</code></p><p><code>tag_per_img</code> 和 <code>category_per_img</code> 是 3.2.0新增的内容，可对 tag 和 category 进行单独的配置</p><p>并不推荐为每个 tag 和每个 category都配置不同的顶部图，因为配置太多会拖慢生成速度</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tag_per_img：</span><br><span class="line">  aplayer: https://xxxxxx.png</span><br><span class="line">  android: ddddddd.png</span><br><span class="line"></span><br><span class="line">category_per_img：</span><br><span class="line">  随想: hdhdh.png</span><br><span class="line">  推荐: ddjdjdjd.png</span><br></pre></td></tr></table></figure><h3 id="footer-背景">footer 背景</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># footer是否显示图片背景(与 top_img一致)</span><br><span class="line">footer_bg: true</span><br></pre></td></tr></table></figure><h3 id="打字效果">打字效果</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Typewriter Effect (打字效果)</span><br><span class="line"># https://github.com/disjukr/activate-power-mode</span><br><span class="line">activate_power_mode:</span><br><span class="line">  enable: true</span><br><span class="line">  colorful: true # open particle animation (冒光特效)</span><br><span class="line">  shake: true #  open shake (抖動特效)</span><br><span class="line">  mobile: false</span><br></pre></td></tr></table></figure><h3 id="是否打开顶部图">是否打开顶部图</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Disable all banner image</span><br><span class="line">disable_top_img: false</span><br></pre></td></tr></table></figure><p>改进</p><p>footer _bg : 底部颜色。</p><p>增加QQ：fa-qq</p><p>打开副标题：subtitle</p><p>PWA？？？？</p><p>切换页面音乐不中断：主题配置文件的 pjax 设为 true</p><p>添加外置图标：iconfont</p><p>博客关键页：hexo new page categories</p><h2 id="问题">问题</h2><ul><li><del>Llist 里面的连接如何解决？</del> 在新建page</li><li>markdown 里面的本地图片插入问题？</li><li>Markdown里面插入视频和网络音乐？</li><li>live2d如何解决？</li><li>主页副标题如何解决？</li><li><del>文章背景问题？透明度（已解决）</del></li><li>博客文件长传链接？</li><li><del>打赏 ？</del> reward：</li></ul>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 想法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>helloword</title>
      <link href="/posts/1.html"/>
      <url>/posts/1.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your veryfirst post. Check <a href="https://hexo.io/docs/">documentation</a> formore info. If you get any problems when using Hexo, you can find theanswer in <ahref="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> oryou can ask me on <ahref="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start">Quick Start</h2><h3 id="create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> -生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 想法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单搭建一个Blog</title>
      <link href="/posts/2.html"/>
      <url>/posts/2.html</url>
      
        <content type="html"><![CDATA[<h2 id="第一章hexo的安装">第一章：HEXO的安装</h2><h3 id="第一步安装git和node">第一步：安装git和node</h3><p>通过搜索引擎搜索并安装Git和Node</p><p>安装好了之后的检测命令：</p><p>git检测：git --version</p><p>node检测：node -v</p><p>检测是否连接ssh：ssh -T git@github.com？？？</p><h3 id="第二步安装hexo">第二步：安装hexo</h3><ol type="1"><li><p>创建一个文件夹用于存放你所有需要放在自己blog资料</p></li><li><p>在文件夹中，右键选择并点击Git Bash Here</p></li><li><p>在命令行窗口输入，安装Hexo <strong>命令行</strong>工具的包名：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure></li></ol><ul><li><code>npm</code> 是 Node.js 包管理器的命令行工具，用于安装和管理JavaScript 包和依赖项。<ul><li><code>install</code> 是 npm 命令的子命令，用于安装包。</li><li><code>hexo-cli</code> 是要安装的包的名称。这是 Hexo命令行工具的包名。</li><li><code>-g</code> 是一个标志，表示要将包全局安装。这意味着 Hexo命令行工具将在你的计算机上全局可用，而不仅仅是在当前项目中可用。</li></ul></li></ul><p>（运行这个命令将会在你的计算机上全局安装 Hexo命令行工具，使你能够在命令行中使用 Hexo的各种命令来管理和生成静态博客网站）</p><ol start="4" type="1"><li><p>再输入安装<strong>hexo</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo -g </span><br></pre></td></tr></table></figure></li></ol><h3 id="第三步对hexo进行配置">第三步：对Hexo进行配置</h3><ol type="1"><li><p><strong>初始化：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>这个命令帮助你快速开始一个新的 Hexo博客项目，并为你创建了必要的文件和结构。一旦你运行了<code>hexo init</code>，你可以开始编写文章、配置博客选项，然后使用 Hexo命令生成静态网站并发布它。</p></li><li><p><strong>下面是经常会用到的本地步骤：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><p><code>hexo clean</code> 主要删除 Hexo项目中以下两个位置的文件和文件夹：</p><ol type="1"><li><code>_public</code> 文件夹（默认情况下）：这个文件夹包含了通过<code>hexo generate</code> 命令生成的静态网站文件，包括HTML、CSS、JavaScript 等。运行 <code>hexo clean</code>将删除这个文件夹及其内容。`</li><li><code>.hexo</code> 文件夹：这个文件夹包含了 Hexo内部的缓存文件，用于加速生成过程。运行 <code>hexo clean</code>会清除这些缓存文件。</li></ol><p>这两个位置的文件和文件夹都是由 Hexo自动生成和管理的，通常不需要手动编辑或删除它们。运行<code>hexo clean</code>主要是为了在需要重新生成静态网站时清理旧的文件和缓存，以确保生成的网站是最新的版本。所以，在执行<code>hexo clean</code>命令之前，请确保你不再需要之前生成的静态网站文件，因为它们将被永久删除。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p><code>hexo generate</code>（或者可以用缩写形式<code>hexo g</code>）是 Hexo命令行工具的一个命令，用于生成静态网站文件。</p><p>当你运行 <code>hexo generate</code> 命令时，Hexo将会执行以下操作：</p><ol type="1"><li><p>使用你的 Hexo 配置文件（通常是<code>_config.yml</code>）中的设置来渲染和生成静态网站的页面。</p></li><li><p>将 Markdown 文件转换为 HTML格式，应用主题和布局，生成最终的静态网页。</p></li><li><p>将生成的静态网站文件保存在配置文件中指定的输出目录中，通常是<code>_public</code> 文件夹（可以在配置文件中自定义）。</p></li><li><p>创建站点地图（sitemap）和 RSS订阅（如果在配置文件中启用了这些功能）。</p><p><code>hexo generate</code> 是构建 Hexo博客网站的关键步骤之一。一旦你运行了这个命令，你就会得到一个包含所有生成的静态页面的文件夹，你可以将这些文件部署到网络服务器上，以便将你的博客发布到互联网上。在执行<code>hexo generate</code>前，通常需要确保你的博客配置文件和文章内容都已准备好。</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s </span><br></pre></td></tr></table></figure><p><code>hexo s</code>（或者可以用缩写形式 <code>hexo server</code>）是Hexo 命令行工具的一个命令，用于启动本地服务器以预览你的博客网站。</p><p>当你运行 <code>hexo s</code> 命令时，Hexo 将会执行以下操作：</p><ol type="1"><li>读取你的 Hexo 配置文件（通常是<code>_config.yml</code>）中的设置。</li><li>在本地计算机上启动一个轻量级的 Web 服务器。</li><li>将你的博客网站在本地服务器上提供出来，可以通过网址访问，通常是<code>http://localhost:4000</code>。</li><li>当你在浏览器中访问这个网址时，你可以实时预览你的博客网站，包括文章、页面和样式。</li></ol><p><code>hexo s</code>命令通常用于在本地开发和测试博客网站，以便你可以在发布到互联网之前查看你的更改。它提供了一个方便的方式来查看你的博客的外观和功能，而不必上传到实际的网络服务器上。要停止本地服务器，只需按下<code>Ctrl + C</code>键组合（在大多数操作系统中），然后选择是否停止服务器。</p><p>总之，<code>hexo s</code> 是一个方便的命令，用于本地预览和测试你的Hexo 博客网站。</p></li></ol><ul><li><p><strong>注意：</strong>因为hexo是静态博客，所以每次对博客做出改变后都需要清除原来的缓存重新生成一次</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean #清除缓存</span><br><span class="line">hexo g #重新生成</span><br><span class="line">hexo s #本地预览</span><br></pre></td></tr></table></figure></li></ul><ol start="3" type="1"><li><p><strong>将制作好的网页部署到网页端（安装+部署）：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p><code>npm install hexo-deployer-git --save</code> 是一个用于在 Hexo项目中安装并保存依赖的命令。</p><p>具体来说：</p><ul><li><p><code>npm install</code> 是使用 Node.js包管理器（npm）来安装包的命令。</p></li><li><p><code>hexo-deployer-git</code> 是要安装的包的名称，它是 Hexo用于通过 Git 将博客网站部署到远程仓库的插件。这个插件允许你使用 Git来发布你的博客。</p></li><li><p><code>--save</code>是一个标志，它在安装包的同时将包的信息添加到项目的<code>package.json</code> 文件中的 <code>dependencies</code>部分，以便其他开发者在克隆你的项目时可以自动安装相同的依赖。</p><p>运行这个命令后，Hexo 将会安装 <code>hexo-deployer-git</code>插件并将其添加到你的 Hexo项目的依赖中。这样，你就可以配置并使用该插件来部署你的博客到 Git仓库中，使其在网络上可访问。</p></li></ul><p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure></p><p><code>hexo d</code>（或者可以用缩写形式 <code>hexo deploy</code>）是Hexo命令行工具的一个命令，用于将你的博客网站部署到远程服务器或托管服务上。</p><p>当你运行 <code>hexo d</code> 命令时，Hexo 将会执行以下操作：</p><ol type="1"><li>读取你的 Hexo 配置文件（通常是<code>_config.yml</code>）中的设置，包括部署配置。</li><li>根据配置中的信息，将生成的静态网站文件上传到远程服务器或托管服务，如GitHubPages、Netlify、Vercel等。</li><li>部署完成后，你的博客网站将在远程服务器或托管服务上可访问，用户可以通过互联网浏览你的博客内容。</li></ol><p>请注意，使用 <code>hexo d</code> 命令进行部署前，你需要先配置好 Hexo的部署选项，包括目标远程服务器或托管服务的信息，认证凭据等。这些配置通常在Hexo的配置文件中进行设置。不同的部署选项可能需要不同的配置，因此请查阅相关文档以确保配置正确。</p><p>总之，<code>hexo d</code> 命令是用于将你的 Hexo博客网站部署到远程服务器或托管服务的命令，以便让其他人通过互联网访问你的博客。</p></li><li><p><strong>部署到Github</strong></p><ol type="1"><li>新建一个仓库（repository）仓库名必须和自己的用户名一致，这个与域名有关，GitHubpages域名就是：用户名.github.io</li><li>点击create创建仓库，之后还需要上传静态页面到GitHub，需要修改hexo目录下的配置文件（不是主题下的配置文件）</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: # 你的github仓库的URL地址  #repo: git@github.com:用户名/用户名.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></li><li><p><strong>SSH（本地与GitHub链接好）</strong></p><ol type="1"><li><p>首先在Git命令行窗口输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;你的邮箱地址&quot;</span><br></pre></td></tr></table></figure><p>生成秘钥，再在相应文件夹中找到秘钥C/user/stang/.ssh中找到，并复制秘钥全部内容</p></li><li><p>在GitHub中依次点击头像-&gt;settings-&gt;SSH-&gt;添加...（标题随便取）</p></li><li><p>回到Git命令行窗口输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>测试ssh是否绑定成功。</p></li></ol></li><li><p>配置Git 用户信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;Your Name&quot;</span><br><span class="line">git config --global user.email &quot;youremail@example.com&quot;</span><br></pre></td></tr></table></figure></li></ol><h2 id="第二章装主题butterfly">第二章：装主题butterfly</h2><ol type="1"><li><p>在hexo项目的根目录下面下载主题</p><p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure></p></li><li><p>安装<code>pug</code> 和 <code>stylus</code> 渲染器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure></li><li><p>修改项目根目录下的<code>_config.yml</code>文件（称为站点配置文件），开启主题。</p><p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: butterfly</span><br></pre></td></tr></table></figure></p></li><li><p>升级建议</p><p>为了減少升级主题带来的不便，我们可以把主题文件夹中的 _config.yml重命名为 _config.butterfly.yml，复制到 Hexo根目录下与_config.yml同级。</p><p>Hexo会自动合并主题中的_config.yml和 _config.butterfly.yml，如果存在同名配置，会使用_config.butterfly.yml的配置，其优先度较高。所以像和博客网址相关联的固定资料可以设置在_config.yml中，比如博客的标题、作者信息和邮箱等等资料，而和主题样式相关的配置放在_config.butterfly.yml 中，那么在将来你想换一个主题是很方便的。</p><hr /><p>版权声明：本文为CSDN博主「CoolTiger、」的原创文章，遵循CC 4.0BY-SA版权协议，转载请附上原文出处链接及本声明。原文链接：https://blog.csdn.net/mjh1667002013/article/details/129290903</p></li><li><p>你可以尝试删除主题目录，然后重新克隆主题仓库并拉取最新版本。在执行此操作之前，请确保备份了任何自定义主题配置和内容。以下是重新克隆主题的步骤：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">bashCopy code# 进入 Hexo 博客根目录</span><br><span class="line">cd /path/to/your/hexo/blog</span><br><span class="line"></span><br><span class="line"># 删除现有的主题目录（确保备份自定义内容）</span><br><span class="line">rm -rf themes/butterfly</span><br><span class="line"></span><br><span class="line"># 重新克隆主题仓库</span><br><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br><span class="line"></span><br><span class="line"># 进入主题目录</span><br><span class="line">cd themes/butterfly</span><br><span class="line"></span><br><span class="line"># 拉取最新版本</span><br><span class="line">git pull origin master</span><br></pre></td></tr></table></figure><p>这将确保你的主题目录是最新的版本。请谨慎操作，以免丢失自定义配置和内容。如果主题有任何特殊的升级步骤，请查看主题的文档以获取更多信息。</p></li></ol><h2 id="第三章图床的选择和使用">第三章：图床的选择和使用</h2><h3 id="githubpicgo">GItHub+PicGo</h3><p>网上的教程有很多，这里说一下简单过程：</p><ol type="1"><li><p>在GitHub端，建立一个新的仓库用于存储所有的图片，然后生成一个token（具体过程就直接百度...教程实在太多了）：</p><ul><li>Github token：********************************************</li></ul></li><li><p>首先需要安装PicGO（直接百度），然后将对应的token放进PicGo的对应位置，并设置好对应的GitHub仓库位置和名字</p></li><li><p>加上自定义域名即可：</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://cdn.jsdelivr.net/gh/用户名/仓库名</span><br></pre></td></tr></table></figure></blockquote></li></ol><p><img src="https://cdn.jsdelivr.net/gh/coolstang217/Blog-img/image-20230914222754341.png" style="zoom: 67%;" /></p><p>这样就可以直接在PicGo上面上传照片啦，非常快捷~</p><h3 id="typorapicgo">Typora+PicGo</h3><p>在Typora上面按照下面图片设置，然后直接在typora上的图片都将直接被同步到GitHub上面~</p><p><imgsrc="https://cdn.jsdelivr.net/gh/coolstang217/Blog-img/image-20230915133215253.png" /></p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 想法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
